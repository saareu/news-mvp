name: etl-cron
on:
  # run every 3 hours
  schedule:
    - cron: "0 */3 * * *"
  # allow manual triggering for testing
  workflow_dispatch:

permissions:
  contents: write

jobs:
  etl:
    # NOTE: This job is gated at runtime by `ETL_RUN_ENABLED` repository Variable.
    # We avoid job-level expressions to keep editors happy; the first step will skip when disabled.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check ETL enabled
        run: |
          if [ "${ETL_RUN_ENABLED:-false}" != "true" ]; then
            echo "ETL_RUN_ENABLED != true â€” skipping ETL job"
            exit 0
          fi
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install -U pip && pip install .
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Run ETL (prod)
        working-directory: ${{ github.workspace }}
        env:
          DEBUG: "1"
        run: |
          echo "=== ETL DEBUG MODE ENABLED ==="
          python -m news_mvp.cli etl run --source ynet --env prod
          echo "=== YNET ETL COMPLETED ==="
          python -m news_mvp.cli etl run --source hayom --env prod
          echo "=== HAYOM ETL COMPLETED ==="
          python -m news_mvp.cli etl run --source haaretz --env prod
          echo "=== HAARETZ ETL COMPLETED ==="
          python -m news_mvp.cli etl merge --env prod
          echo "=== MERGE COMPLETED ==="

      - name: Debug List data/pics contents
        run: |
          echo "=== DEBUGGING IMAGE DIRECTORIES ==="
          echo "Listing all directories under data/pics/ (including date-based dirs):"
          mkdir -p data/pics # Ensure it exists
          find data/pics -type d | sort
          
          echo "=== DEBUGGING IMAGE FILES ==="
          echo "Listing all image files (should show date-based paths):"
          find data/pics -type f | grep -v ".gitkeep" || echo "NO IMAGE FILES FOUND!"
          
          echo "=== IMAGE COUNTS ==="
          echo "Total image files:" 
          find data/pics -type f | grep -v ".gitkeep" | wc -l
          
          echo "=== DIRECTORY CONTENTS WITH FILE DETAILS ==="
          ls -lR data/pics
          
          echo "=== DETAILED FILE INFO ==="
          echo "Individual file details with timestamps:"
          find data/pics -type f -exec ls -la {} \;
          
          echo "=== GIT STATUS BEFORE ADD ==="
          git status --porcelain
          
          echo "=== GIT TRACKED/UNTRACKED FILES IN data/pics ==="
          echo "Tracked files:"
          git ls-files data/pics || echo "No tracked files"
          echo "Untracked files:"
          git ls-files --others --exclude-standard data/pics || echo "No untracked files"
          
          echo "=== CHECKING GITIGNORE PATTERNS ==="
          echo "Testing if data/pics files are ignored:"
          find data/pics -type f | head -5 | while read file; do
            echo "File: $file"
            git check-ignore "$file" && echo "  -> IGNORED by gitignore" || echo "  -> NOT ignored"
          done
      
      - name: Check for changes and commit
        run: |
          echo "=== BEFORE GIT ADD ==="
          git status --porcelain
          
          echo "=== EXPLICITLY ADDING data/pics ==="
          # Explicitly add data/pics directory to ensure images are tracked
          git add data/pics -f -v
          
          echo "=== ADDING .gitkeep files ==="
          # Also add the .gitkeep files in all subdirectories
          find data/pics -name ".gitkeep" -exec git add -v {} \;
          
          echo "=== ADDING ALL OTHER CHANGES ==="
          # Add all other changes
          git add -A -v
          
          echo "=== AFTER GIT ADD ==="
          git status --porcelain
          
          echo "=== GIT DIFF --cached (what will be committed) ==="
          git diff --cached --name-only
          
          echo "=== COMMITTING ==="
          git commit -m "feat: Update master CSV files and images

          - Updated master CSV files with latest news data  
          - Added/updated article images
          - Auto-generated by ETL pipeline on $(date -u +'%Y-%m-%d %H:%M UTC')

          Sources: ynet, hayom, haaretz
          " || echo "No changes to commit"
          
          echo "=== PUSHING ==="
          git push -f
